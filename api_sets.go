/*
Dofusdude

The last API for everything Dofus ü§Ø  ```js var dofusdude = require(\"dofusdude-js\");  new dofusdude.AllItemsApi().getItemsAllSearch(   \"en\",   \"dofus2\",   \"nidas\",   { filterTypeName: \"hat\" },   (err, data, response) => {     console.log(data[0]);   } ); ```  ### Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue at the Docs Repo.  ## Main Features - ü•∑ **seamless auto-update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **blazingly fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **search by relevance** allowing typos in name and description, handled by language specific text analysis and indexing by the powerful [Meilisearch](https://www.meilisearch.com) written in Rust.  - üïµÔ∏è **complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD images** rendering vector graphics into PNGs up to 800x800 px in the background.   ## Current state - Weapons ‚úÖ - Equipment ‚úÖ - Sets ‚úÖ - Resources ‚úÖ - Consumables ‚úÖ - Pets ‚úÖ - Mounts ‚úÖ - Cosmetics/Ceremonial Items ‚úÖ - Harnesses ‚úÖ - Quest Items ‚úÖ - Almanax ‚úÖ  - Monsters ‚ùå - Classes ‚ùå - Spells ‚ùå - Professions ‚ùå   ### Maybes? I don't know what for ü§∑ - Sidekicks ‚ùå - Haven Bags ‚ùå - Map ‚ùå   ## Future I want this project to be useful and not just add plain categories no one needs. More and more features will be added to enhance the quality based on the needs of you, the developers.  Examples: _I need to know where I can drop the all the items I need to craft set X!_  _Please get a detailed always up-to-date spell description so I can calculate the damage for my set builder site!_  Nearly everything can be done. But I want to make sure somebody also wants it.  If you have anything or you are just interested in the project, join the [Discord](https://discord.gg/3EtHskZD8h).  ### Versioning Updating an API is a hard problem. This is why we'll keep it simple:  Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility, so no field or parameter will be deleted. Ever.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  We can prevent this specific use case with a nice community but even then, it would be hidden behind a feature flag.  ## Get started! ü•≥ Scroll down and try it for yourself!  If you are ready to use them in your project, think about [generating a client üßô](https://github.com/OpenAPITools/openapi-generator) or use one of our pre generated SDKs linked at the top.  Awesome Projects using this API:  - [KaellyBot](https://github.com/Kaysoro/KaellyBot) by Kaysoro - [Dofus Craftlist](https://dofuscraftlist-dev.netlify.app) by Lystina - [AlmanaxApp](https://almanaxapp.netlify.app) by Lystina - [luwnarya.fr](https://luwnarya.fr)  

API version: 0.5.3
Contact: stelzo@steado.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dofusdude-go

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SetsApiService SetsApi service
type SetsApiService service

type ApiGetSetsListRequest struct {
	ctx context.Context
	ApiService *SetsApiService
	language string
	game string
	sortLevel *string
	filterMinHighestEquipmentLevel *int32
	filterMaxHighestEquipmentLevel *int32
	pageSize *int32
	pageNumber *int32
}

// sort the resulting list by level, default unsorted
func (r ApiGetSetsListRequest) SortLevel(sortLevel string) ApiGetSetsListRequest {
	r.sortLevel = &sortLevel
	return r
}

// only results where the equipment with the highest level is above or equal to this value
func (r ApiGetSetsListRequest) FilterMinHighestEquipmentLevel(filterMinHighestEquipmentLevel int32) ApiGetSetsListRequest {
	r.filterMinHighestEquipmentLevel = &filterMinHighestEquipmentLevel
	return r
}

// only results where the equipment with the highest level is below or equal to this value
func (r ApiGetSetsListRequest) FilterMaxHighestEquipmentLevel(filterMaxHighestEquipmentLevel int32) ApiGetSetsListRequest {
	r.filterMaxHighestEquipmentLevel = &filterMaxHighestEquipmentLevel
	return r
}

// size of the results from the list. -1 disables pagination and gets all in one response.
func (r ApiGetSetsListRequest) PageSize(pageSize int32) ApiGetSetsListRequest {
	r.pageSize = &pageSize
	return r
}

// page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16.
func (r ApiGetSetsListRequest) PageNumber(pageNumber int32) ApiGetSetsListRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiGetSetsListRequest) Execute() (*SetsListPaged, *http.Response, error) {
	return r.ApiService.GetSetsListExecute(r)
}

/*
GetSetsList List Sets

Retrieve a list of sets.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param language a valid language code
 @param game
 @return ApiGetSetsListRequest
*/
func (a *SetsApiService) GetSetsList(ctx context.Context, language string, game string) ApiGetSetsListRequest {
	return ApiGetSetsListRequest{
		ApiService: a,
		ctx: ctx,
		language: language,
		game: game,
	}
}

// Execute executes the request
//  @return SetsListPaged
func (a *SetsApiService) GetSetsListExecute(r ApiGetSetsListRequest) (*SetsListPaged, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetsListPaged
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SetsApiService.GetSetsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{game}/{language}/sets"
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterToString(r.language, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterToString(r.game, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.language) < 2 {
		return localVarReturnValue, nil, reportError("language must have at least 2 elements")
	}
	if strlen(r.language) > 2 {
		return localVarReturnValue, nil, reportError("language must have less than 2 elements")
	}

	if r.sortLevel != nil {
		localVarQueryParams.Add("sort[level]", parameterToString(*r.sortLevel, ""))
	}
	if r.filterMinHighestEquipmentLevel != nil {
		localVarQueryParams.Add("filter[min_highest_equipment_level]", parameterToString(*r.filterMinHighestEquipmentLevel, ""))
	}
	if r.filterMaxHighestEquipmentLevel != nil {
		localVarQueryParams.Add("filter[max_highest_equipment_level]", parameterToString(*r.filterMaxHighestEquipmentLevel, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page[size]", parameterToString(*r.pageSize, ""))
	}
	if r.pageNumber != nil {
		localVarQueryParams.Add("page[number]", parameterToString(*r.pageNumber, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSetsSearchRequest struct {
	ctx context.Context
	ApiService *SetsApiService
	language string
	game string
	query *string
	filterMinHighestEquipmentLevel *int32
	filterMaxHighestEquipmentLevel *int32
}

// case sensitive search query
func (r ApiGetSetsSearchRequest) Query(query string) ApiGetSetsSearchRequest {
	r.query = &query
	return r
}

// only results where the equipment with the highest level is above or equal to this value
func (r ApiGetSetsSearchRequest) FilterMinHighestEquipmentLevel(filterMinHighestEquipmentLevel int32) ApiGetSetsSearchRequest {
	r.filterMinHighestEquipmentLevel = &filterMinHighestEquipmentLevel
	return r
}

// only results where the equipment with the highest level is below or equal to this value
func (r ApiGetSetsSearchRequest) FilterMaxHighestEquipmentLevel(filterMaxHighestEquipmentLevel int32) ApiGetSetsSearchRequest {
	r.filterMaxHighestEquipmentLevel = &filterMaxHighestEquipmentLevel
	return r
}

func (r ApiGetSetsSearchRequest) Execute() ([]SetListEntry, *http.Response, error) {
	return r.ApiService.GetSetsSearchExecute(r)
}

/*
GetSetsSearch Search Sets

Search in all names and descriptions of sets with a query.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param language a valid language code
 @param game
 @return ApiGetSetsSearchRequest
*/
func (a *SetsApiService) GetSetsSearch(ctx context.Context, language string, game string) ApiGetSetsSearchRequest {
	return ApiGetSetsSearchRequest{
		ApiService: a,
		ctx: ctx,
		language: language,
		game: game,
	}
}

// Execute executes the request
//  @return []SetListEntry
func (a *SetsApiService) GetSetsSearchExecute(r ApiGetSetsSearchRequest) ([]SetListEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SetListEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SetsApiService.GetSetsSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{game}/{language}/sets/search"
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterToString(r.language, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterToString(r.game, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.language) < 2 {
		return localVarReturnValue, nil, reportError("language must have at least 2 elements")
	}
	if strlen(r.language) > 2 {
		return localVarReturnValue, nil, reportError("language must have less than 2 elements")
	}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	if r.filterMinHighestEquipmentLevel != nil {
		localVarQueryParams.Add("filter[min_highest_equipment_level]", parameterToString(*r.filterMinHighestEquipmentLevel, ""))
	}
	if r.filterMaxHighestEquipmentLevel != nil {
		localVarQueryParams.Add("filter[max_highest_equipment_level]", parameterToString(*r.filterMaxHighestEquipmentLevel, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSetsSingleRequest struct {
	ctx context.Context
	ApiService *SetsApiService
	language string
	ankamaId int32
	game string
}

func (r ApiGetSetsSingleRequest) Execute() (*EquipmentSet, *http.Response, error) {
	return r.ApiService.GetSetsSingleExecute(r)
}

/*
GetSetsSingle Single Sets

Retrieve a specific set with id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param language a valid language code
 @param ankamaId identifier
 @param game
 @return ApiGetSetsSingleRequest
*/
func (a *SetsApiService) GetSetsSingle(ctx context.Context, language string, ankamaId int32, game string) ApiGetSetsSingleRequest {
	return ApiGetSetsSingleRequest{
		ApiService: a,
		ctx: ctx,
		language: language,
		ankamaId: ankamaId,
		game: game,
	}
}

// Execute executes the request
//  @return EquipmentSet
func (a *SetsApiService) GetSetsSingleExecute(r ApiGetSetsSingleRequest) (*EquipmentSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EquipmentSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SetsApiService.GetSetsSingle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{game}/{language}/sets/{ankama_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterToString(r.language, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ankama_id"+"}", url.PathEscape(parameterToString(r.ankamaId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterToString(r.game, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.language) < 2 {
		return localVarReturnValue, nil, reportError("language must have at least 2 elements")
	}
	if strlen(r.language) > 2 {
		return localVarReturnValue, nil, reportError("language must have less than 2 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
