/*
dofusdude

# A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js --save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts --save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [PHP](https://github.com/dofusdude/dofusdude-php) - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 

API version: 0.9.1
Contact: stelzo@steado.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dodugo

import (
	"encoding/json"
)

// checks if the AlmanaxEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlmanaxEntry{}

// AlmanaxEntry struct for AlmanaxEntry
type AlmanaxEntry struct {
	Bonus *AlmanaxEntryBonus `json:"bonus,omitempty"`
	Date *string `json:"date,omitempty"`
	Tribute *AlmanaxEntryTribute `json:"tribute,omitempty"`
	// Amount of Kamas you get as reward for finishing this Almanax quest.
	RewardKamas NullableInt32 `json:"reward_kamas,omitempty"`
}

// NewAlmanaxEntry instantiates a new AlmanaxEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlmanaxEntry() *AlmanaxEntry {
	this := AlmanaxEntry{}
	return &this
}

// NewAlmanaxEntryWithDefaults instantiates a new AlmanaxEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlmanaxEntryWithDefaults() *AlmanaxEntry {
	this := AlmanaxEntry{}
	return &this
}

// GetBonus returns the Bonus field value if set, zero value otherwise.
func (o *AlmanaxEntry) GetBonus() AlmanaxEntryBonus {
	if o == nil || IsNil(o.Bonus) {
		var ret AlmanaxEntryBonus
		return ret
	}
	return *o.Bonus
}

// GetBonusOk returns a tuple with the Bonus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlmanaxEntry) GetBonusOk() (*AlmanaxEntryBonus, bool) {
	if o == nil || IsNil(o.Bonus) {
		return nil, false
	}
	return o.Bonus, true
}

// HasBonus returns a boolean if a field has been set.
func (o *AlmanaxEntry) HasBonus() bool {
	if o != nil && !IsNil(o.Bonus) {
		return true
	}

	return false
}

// SetBonus gets a reference to the given AlmanaxEntryBonus and assigns it to the Bonus field.
func (o *AlmanaxEntry) SetBonus(v AlmanaxEntryBonus) {
	o.Bonus = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *AlmanaxEntry) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlmanaxEntry) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *AlmanaxEntry) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *AlmanaxEntry) SetDate(v string) {
	o.Date = &v
}

// GetTribute returns the Tribute field value if set, zero value otherwise.
func (o *AlmanaxEntry) GetTribute() AlmanaxEntryTribute {
	if o == nil || IsNil(o.Tribute) {
		var ret AlmanaxEntryTribute
		return ret
	}
	return *o.Tribute
}

// GetTributeOk returns a tuple with the Tribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlmanaxEntry) GetTributeOk() (*AlmanaxEntryTribute, bool) {
	if o == nil || IsNil(o.Tribute) {
		return nil, false
	}
	return o.Tribute, true
}

// HasTribute returns a boolean if a field has been set.
func (o *AlmanaxEntry) HasTribute() bool {
	if o != nil && !IsNil(o.Tribute) {
		return true
	}

	return false
}

// SetTribute gets a reference to the given AlmanaxEntryTribute and assigns it to the Tribute field.
func (o *AlmanaxEntry) SetTribute(v AlmanaxEntryTribute) {
	o.Tribute = &v
}

// GetRewardKamas returns the RewardKamas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlmanaxEntry) GetRewardKamas() int32 {
	if o == nil || IsNil(o.RewardKamas.Get()) {
		var ret int32
		return ret
	}
	return *o.RewardKamas.Get()
}

// GetRewardKamasOk returns a tuple with the RewardKamas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlmanaxEntry) GetRewardKamasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RewardKamas.Get(), o.RewardKamas.IsSet()
}

// HasRewardKamas returns a boolean if a field has been set.
func (o *AlmanaxEntry) HasRewardKamas() bool {
	if o != nil && o.RewardKamas.IsSet() {
		return true
	}

	return false
}

// SetRewardKamas gets a reference to the given NullableInt32 and assigns it to the RewardKamas field.
func (o *AlmanaxEntry) SetRewardKamas(v int32) {
	o.RewardKamas.Set(&v)
}
// SetRewardKamasNil sets the value for RewardKamas to be an explicit nil
func (o *AlmanaxEntry) SetRewardKamasNil() {
	o.RewardKamas.Set(nil)
}

// UnsetRewardKamas ensures that no value is present for RewardKamas, not even an explicit nil
func (o *AlmanaxEntry) UnsetRewardKamas() {
	o.RewardKamas.Unset()
}

func (o AlmanaxEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlmanaxEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bonus) {
		toSerialize["bonus"] = o.Bonus
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Tribute) {
		toSerialize["tribute"] = o.Tribute
	}
	if o.RewardKamas.IsSet() {
		toSerialize["reward_kamas"] = o.RewardKamas.Get()
	}
	return toSerialize, nil
}

type NullableAlmanaxEntry struct {
	value *AlmanaxEntry
	isSet bool
}

func (v NullableAlmanaxEntry) Get() *AlmanaxEntry {
	return v.value
}

func (v *NullableAlmanaxEntry) Set(val *AlmanaxEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableAlmanaxEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableAlmanaxEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlmanaxEntry(val *AlmanaxEntry) *NullableAlmanaxEntry {
	return &NullableAlmanaxEntry{value: val, isSet: true}
}

func (v NullableAlmanaxEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlmanaxEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


