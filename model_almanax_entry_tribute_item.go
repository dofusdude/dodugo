/*
Dofusdude

# A project for you - the developer. The free, always-up-to-date, low-latency, insert-buzzword-here Ankama API for your next cool project!  ## Client SDKs Don't write types or functions yourself - I already (kinda) did! üòâ - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save - [Go](https://github.com/dofusdude/dodugo) go get -u github.com/dofusdude/dodugo - [Python](https://github.com/dofusdude/dofusdude-py) pip install dofusdude - [PHP](https://github.com/dofusdude/dofusdude-php)  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related Twitter, RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing by the powerful [Meilisearch](https://www.meilisearch.com) written in Rust.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering vector graphics into PNGs up to 800x800 px in the background.   ## Current state - Weapons ‚úÖ - Equipment ‚úÖ - Sets ‚úÖ - Resources ‚úÖ - Consumables ‚úÖ - Pets ‚úÖ - Mounts ‚úÖ - Cosmetics/Ceremonial Items ‚úÖ - Harnesses ‚úÖ - Quest Items ‚úÖ - Almanax ‚úÖ - Monsters ‚ùå - Spells ‚ùå  ... and much more on the Roadmap on my Discord.   ## Deploy now. Use forever. Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility, so no field or parameter will be deleted.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  ## Only the beginning... ü§Ø I want this project to be useful and not just add plain GET-categories no one needs.  There is a long list of features I want to add (see the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h)). But they are all focussed on you, the developers. So please let me know what you need. I will change the list based on demand.  # Get started! ü•≥ Scroll down and try it for yourself!  Or see how these other awesome projects use it: - [KaellyBot](https://github.com/Kaysoro/KaellyBot) by Kaysoro - [Dofus Craftlist](https://dofuscraftlist-dev.netlify.app) by Lystina - [AlmanaxApp](https://almanaxapp.netlify.app) by Lystina  I highly recommend using the SDKs for quick results. I use them myself for microservices for the API.  ## Thank you! I highly welcome everyone on my [Discord](https://discord.gg/3EtHskZD8h) to just talk about projects and use cases or give feedback of any kind.  The servers have a fixed monthly cost to provide very fast responses. If you want to help me keeping them running or simply  donate, consider becoming a [GitHub Sponsor](https://github.com/sponsors/dofusdude). 

API version: 0.7.1
Contact: stelzo@steado.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dodugo

import (
	"encoding/json"
)

// checks if the AlmanaxEntryTributeItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlmanaxEntryTributeItem{}

// AlmanaxEntryTributeItem struct for AlmanaxEntryTributeItem
type AlmanaxEntryTributeItem struct {
	AnkamaId *int32 `json:"ankama_id,omitempty"`
	ImageUrls *ImageUrls `json:"image_urls,omitempty"`
	Name *string `json:"name,omitempty"`
	Subtype *string `json:"subtype,omitempty"`
}

// NewAlmanaxEntryTributeItem instantiates a new AlmanaxEntryTributeItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlmanaxEntryTributeItem() *AlmanaxEntryTributeItem {
	this := AlmanaxEntryTributeItem{}
	return &this
}

// NewAlmanaxEntryTributeItemWithDefaults instantiates a new AlmanaxEntryTributeItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlmanaxEntryTributeItemWithDefaults() *AlmanaxEntryTributeItem {
	this := AlmanaxEntryTributeItem{}
	return &this
}

// GetAnkamaId returns the AnkamaId field value if set, zero value otherwise.
func (o *AlmanaxEntryTributeItem) GetAnkamaId() int32 {
	if o == nil || isNil(o.AnkamaId) {
		var ret int32
		return ret
	}
	return *o.AnkamaId
}

// GetAnkamaIdOk returns a tuple with the AnkamaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlmanaxEntryTributeItem) GetAnkamaIdOk() (*int32, bool) {
	if o == nil || isNil(o.AnkamaId) {
		return nil, false
	}
	return o.AnkamaId, true
}

// HasAnkamaId returns a boolean if a field has been set.
func (o *AlmanaxEntryTributeItem) HasAnkamaId() bool {
	if o != nil && !isNil(o.AnkamaId) {
		return true
	}

	return false
}

// SetAnkamaId gets a reference to the given int32 and assigns it to the AnkamaId field.
func (o *AlmanaxEntryTributeItem) SetAnkamaId(v int32) {
	o.AnkamaId = &v
}

// GetImageUrls returns the ImageUrls field value if set, zero value otherwise.
func (o *AlmanaxEntryTributeItem) GetImageUrls() ImageUrls {
	if o == nil || isNil(o.ImageUrls) {
		var ret ImageUrls
		return ret
	}
	return *o.ImageUrls
}

// GetImageUrlsOk returns a tuple with the ImageUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlmanaxEntryTributeItem) GetImageUrlsOk() (*ImageUrls, bool) {
	if o == nil || isNil(o.ImageUrls) {
		return nil, false
	}
	return o.ImageUrls, true
}

// HasImageUrls returns a boolean if a field has been set.
func (o *AlmanaxEntryTributeItem) HasImageUrls() bool {
	if o != nil && !isNil(o.ImageUrls) {
		return true
	}

	return false
}

// SetImageUrls gets a reference to the given ImageUrls and assigns it to the ImageUrls field.
func (o *AlmanaxEntryTributeItem) SetImageUrls(v ImageUrls) {
	o.ImageUrls = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlmanaxEntryTributeItem) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlmanaxEntryTributeItem) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlmanaxEntryTributeItem) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlmanaxEntryTributeItem) SetName(v string) {
	o.Name = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *AlmanaxEntryTributeItem) GetSubtype() string {
	if o == nil || isNil(o.Subtype) {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlmanaxEntryTributeItem) GetSubtypeOk() (*string, bool) {
	if o == nil || isNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *AlmanaxEntryTributeItem) HasSubtype() bool {
	if o != nil && !isNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *AlmanaxEntryTributeItem) SetSubtype(v string) {
	o.Subtype = &v
}

func (o AlmanaxEntryTributeItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlmanaxEntryTributeItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AnkamaId) {
		toSerialize["ankama_id"] = o.AnkamaId
	}
	if !isNil(o.ImageUrls) {
		toSerialize["image_urls"] = o.ImageUrls
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	return toSerialize, nil
}

type NullableAlmanaxEntryTributeItem struct {
	value *AlmanaxEntryTributeItem
	isSet bool
}

func (v NullableAlmanaxEntryTributeItem) Get() *AlmanaxEntryTributeItem {
	return v.value
}

func (v *NullableAlmanaxEntryTributeItem) Set(val *AlmanaxEntryTributeItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAlmanaxEntryTributeItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAlmanaxEntryTributeItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlmanaxEntryTributeItem(val *AlmanaxEntryTributeItem) *NullableAlmanaxEntryTributeItem {
	return &NullableAlmanaxEntryTributeItem{value: val, isSet: true}
}

func (v NullableAlmanaxEntryTributeItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlmanaxEntryTributeItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


