/*
dofusdude

# Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js --save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts --save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 

API version: 1.0.0
Contact: stelzo@steado.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dodugo

import (
	"encoding/json"
)

// checks if the AlmanaxWebhookDailySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlmanaxWebhookDailySettings{}

// AlmanaxWebhookDailySettings struct for AlmanaxWebhookDailySettings
type AlmanaxWebhookDailySettings struct {
	// Timezone of your community to determine midnight.
	Timezone *string `json:"timezone,omitempty"`
	// Hours added to midnight at the selected timezone. 8 = 8:00 in the morning.
	MidnightOffset *int32 `json:"midnight_offset,omitempty"`
}

// NewAlmanaxWebhookDailySettings instantiates a new AlmanaxWebhookDailySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlmanaxWebhookDailySettings() *AlmanaxWebhookDailySettings {
	this := AlmanaxWebhookDailySettings{}
	var timezone string = "Europe/Paris"
	this.Timezone = &timezone
	var midnightOffset int32 = 0
	this.MidnightOffset = &midnightOffset
	return &this
}

// NewAlmanaxWebhookDailySettingsWithDefaults instantiates a new AlmanaxWebhookDailySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlmanaxWebhookDailySettingsWithDefaults() *AlmanaxWebhookDailySettings {
	this := AlmanaxWebhookDailySettings{}
	var timezone string = "Europe/Paris"
	this.Timezone = &timezone
	var midnightOffset int32 = 0
	this.MidnightOffset = &midnightOffset
	return &this
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *AlmanaxWebhookDailySettings) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlmanaxWebhookDailySettings) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *AlmanaxWebhookDailySettings) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *AlmanaxWebhookDailySettings) SetTimezone(v string) {
	o.Timezone = &v
}

// GetMidnightOffset returns the MidnightOffset field value if set, zero value otherwise.
func (o *AlmanaxWebhookDailySettings) GetMidnightOffset() int32 {
	if o == nil || IsNil(o.MidnightOffset) {
		var ret int32
		return ret
	}
	return *o.MidnightOffset
}

// GetMidnightOffsetOk returns a tuple with the MidnightOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlmanaxWebhookDailySettings) GetMidnightOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.MidnightOffset) {
		return nil, false
	}
	return o.MidnightOffset, true
}

// HasMidnightOffset returns a boolean if a field has been set.
func (o *AlmanaxWebhookDailySettings) HasMidnightOffset() bool {
	if o != nil && !IsNil(o.MidnightOffset) {
		return true
	}

	return false
}

// SetMidnightOffset gets a reference to the given int32 and assigns it to the MidnightOffset field.
func (o *AlmanaxWebhookDailySettings) SetMidnightOffset(v int32) {
	o.MidnightOffset = &v
}

func (o AlmanaxWebhookDailySettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlmanaxWebhookDailySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.MidnightOffset) {
		toSerialize["midnight_offset"] = o.MidnightOffset
	}
	return toSerialize, nil
}

type NullableAlmanaxWebhookDailySettings struct {
	value *AlmanaxWebhookDailySettings
	isSet bool
}

func (v NullableAlmanaxWebhookDailySettings) Get() *AlmanaxWebhookDailySettings {
	return v.value
}

func (v *NullableAlmanaxWebhookDailySettings) Set(val *AlmanaxWebhookDailySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAlmanaxWebhookDailySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAlmanaxWebhookDailySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlmanaxWebhookDailySettings(val *AlmanaxWebhookDailySettings) *NullableAlmanaxWebhookDailySettings {
	return &NullableAlmanaxWebhookDailySettings{value: val, isSet: true}
}

func (v NullableAlmanaxWebhookDailySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlmanaxWebhookDailySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


