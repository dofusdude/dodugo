/*
Dofusdude

The last API for everything Dofus ü§Ø  ### JS Quickstart ```js var dofusdude = require(\"dofusdude-js\");  new dofusdude.AllItemsApi().getItemsAllSearch(   \"en\",   \"dofus2\",   \"nidas\",   { filterTypeName: \"hat\" },   (err, data, response) => {     console.log(data[0]);   } ); ```  ### Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue at the Docs Repo.  ## Main Features - ü•∑ **seamless auto-update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **blazingly fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **search by relevance** allowing typos in name and description, handled by language specific text analysis and indexing by the powerful [Meilisearch](https://www.meilisearch.com) written in Rust.  - üïµÔ∏è **complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD images** rendering vector graphics into PNGs up to 800x800 px in the background.   ## Current state - Weapons ‚úÖ - Equipment ‚úÖ - Sets ‚úÖ - Resources ‚úÖ - Consumables ‚úÖ - Pets ‚úÖ - Mounts ‚úÖ - Cosmetics/Ceremonial Items ‚úÖ - Harnesses ‚úÖ - Quest Items ‚úÖ - Almanax ‚úÖ  - Monsters ‚ùå - Classes ‚ùå - Spells ‚ùå - Professions ‚ùå   ### Maybes? I don't know what for ü§∑ - Sidekicks ‚ùå - Haven Bags ‚ùå - Map ‚ùå   ## Future I want this project to be useful and not just add plain categories no one needs. More and more features will be added to enhance the quality based on the needs of you, the developers.  Examples: _I need to know where I can drop the all the items I need to craft set X!_  _Please get a detailed always up-to-date spell description so I can calculate the damage for my set builder site!_  Nearly everything can be done. But I want to make sure somebody also wants it.  If you have anything or you are just interested in the project, join the [Discord](https://discord.gg/3EtHskZD8h).  ### Versioning Updating an API is a hard problem. This is why we'll keep it simple:  Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility, so no field or parameter will be deleted. Ever.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  We can prevent this specific use case with a nice community but even then, it would be hidden behind a feature flag.  ## Get started! ü•≥ Scroll down and try it for yourself!  If you are ready to use them in your project, think about [generating a client üßô](https://github.com/OpenAPITools/openapi-generator) or use one of our pre generated SDKs linked at the top.  Awesome Projects using this API:  - [KaellyBot](https://github.com/Kaysoro/KaellyBot) by Kaysoro - [Dofus Craftlist](https://dofuscraftlist-dev.netlify.app) by Lystina - [AlmanaxApp](https://almanaxapp.netlify.app) by Lystina - [luwnarya.fr](https://luwnarya.fr)  

API version: 0.5.4
Contact: stelzo@steado.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dodugo

import (
	"encoding/json"
)

// ConditionEntry struct for ConditionEntry
type ConditionEntry struct {
	Operator *string `json:"operator,omitempty"`
	IntValue *int32 `json:"int_value,omitempty"`
	Element *EffectsEntryType `json:"element,omitempty"`
}

// NewConditionEntry instantiates a new ConditionEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionEntry() *ConditionEntry {
	this := ConditionEntry{}
	return &this
}

// NewConditionEntryWithDefaults instantiates a new ConditionEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionEntryWithDefaults() *ConditionEntry {
	this := ConditionEntry{}
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *ConditionEntry) GetOperator() string {
	if o == nil || o.Operator == nil {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionEntry) GetOperatorOk() (*string, bool) {
	if o == nil || o.Operator == nil {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *ConditionEntry) HasOperator() bool {
	if o != nil && o.Operator != nil {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *ConditionEntry) SetOperator(v string) {
	o.Operator = &v
}

// GetIntValue returns the IntValue field value if set, zero value otherwise.
func (o *ConditionEntry) GetIntValue() int32 {
	if o == nil || o.IntValue == nil {
		var ret int32
		return ret
	}
	return *o.IntValue
}

// GetIntValueOk returns a tuple with the IntValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionEntry) GetIntValueOk() (*int32, bool) {
	if o == nil || o.IntValue == nil {
		return nil, false
	}
	return o.IntValue, true
}

// HasIntValue returns a boolean if a field has been set.
func (o *ConditionEntry) HasIntValue() bool {
	if o != nil && o.IntValue != nil {
		return true
	}

	return false
}

// SetIntValue gets a reference to the given int32 and assigns it to the IntValue field.
func (o *ConditionEntry) SetIntValue(v int32) {
	o.IntValue = &v
}

// GetElement returns the Element field value if set, zero value otherwise.
func (o *ConditionEntry) GetElement() EffectsEntryType {
	if o == nil || o.Element == nil {
		var ret EffectsEntryType
		return ret
	}
	return *o.Element
}

// GetElementOk returns a tuple with the Element field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionEntry) GetElementOk() (*EffectsEntryType, bool) {
	if o == nil || o.Element == nil {
		return nil, false
	}
	return o.Element, true
}

// HasElement returns a boolean if a field has been set.
func (o *ConditionEntry) HasElement() bool {
	if o != nil && o.Element != nil {
		return true
	}

	return false
}

// SetElement gets a reference to the given EffectsEntryType and assigns it to the Element field.
func (o *ConditionEntry) SetElement(v EffectsEntryType) {
	o.Element = &v
}

func (o ConditionEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Operator != nil {
		toSerialize["operator"] = o.Operator
	}
	if o.IntValue != nil {
		toSerialize["int_value"] = o.IntValue
	}
	if o.Element != nil {
		toSerialize["element"] = o.Element
	}
	return json.Marshal(toSerialize)
}

type NullableConditionEntry struct {
	value *ConditionEntry
	isSet bool
}

func (v NullableConditionEntry) Get() *ConditionEntry {
	return v.value
}

func (v *NullableConditionEntry) Set(val *ConditionEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionEntry(val *ConditionEntry) *NullableConditionEntry {
	return &NullableConditionEntry{value: val, isSet: true}
}

func (v NullableConditionEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


