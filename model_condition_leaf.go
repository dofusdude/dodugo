/*
dofusdude

# Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js --save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts --save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 

API version: 1.0.0-rc.5
Contact: stelzo@steado.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dodugo

import (
	"encoding/json"
)

// checks if the ConditionLeaf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionLeaf{}

// ConditionLeaf struct for ConditionLeaf
type ConditionLeaf struct {
	// always \"true\" for the leaf of a tree
	IsOperand *bool `json:"is_operand,omitempty"`
	Condition *Condition `json:"condition,omitempty"`
}

// NewConditionLeaf instantiates a new ConditionLeaf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionLeaf() *ConditionLeaf {
	this := ConditionLeaf{}
	var isOperand bool = true
	this.IsOperand = &isOperand
	return &this
}

// NewConditionLeafWithDefaults instantiates a new ConditionLeaf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionLeafWithDefaults() *ConditionLeaf {
	this := ConditionLeaf{}
	var isOperand bool = true
	this.IsOperand = &isOperand
	return &this
}

// GetIsOperand returns the IsOperand field value if set, zero value otherwise.
func (o *ConditionLeaf) GetIsOperand() bool {
	if o == nil || IsNil(o.IsOperand) {
		var ret bool
		return ret
	}
	return *o.IsOperand
}

// GetIsOperandOk returns a tuple with the IsOperand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionLeaf) GetIsOperandOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOperand) {
		return nil, false
	}
	return o.IsOperand, true
}

// HasIsOperand returns a boolean if a field has been set.
func (o *ConditionLeaf) HasIsOperand() bool {
	if o != nil && !IsNil(o.IsOperand) {
		return true
	}

	return false
}

// SetIsOperand gets a reference to the given bool and assigns it to the IsOperand field.
func (o *ConditionLeaf) SetIsOperand(v bool) {
	o.IsOperand = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ConditionLeaf) GetCondition() Condition {
	if o == nil || IsNil(o.Condition) {
		var ret Condition
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionLeaf) GetConditionOk() (*Condition, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ConditionLeaf) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given Condition and assigns it to the Condition field.
func (o *ConditionLeaf) SetCondition(v Condition) {
	o.Condition = &v
}

func (o ConditionLeaf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionLeaf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsOperand) {
		toSerialize["is_operand"] = o.IsOperand
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	return toSerialize, nil
}

type NullableConditionLeaf struct {
	value *ConditionLeaf
	isSet bool
}

func (v NullableConditionLeaf) Get() *ConditionLeaf {
	return v.value
}

func (v *NullableConditionLeaf) Set(val *ConditionLeaf) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionLeaf) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionLeaf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionLeaf(val *ConditionLeaf) *NullableConditionLeaf {
	return &NullableConditionLeaf{value: val, isSet: true}
}

func (v NullableConditionLeaf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionLeaf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


