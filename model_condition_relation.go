/*
dofusdude

# Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js --save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts --save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 

API version: 1.0.0
Contact: stelzo@steado.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dodugo

import (
	"encoding/json"
)

// checks if the ConditionRelation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionRelation{}

// ConditionRelation 
type ConditionRelation struct {
	// always \"false\" for relations
	IsOperand *bool `json:"is_operand,omitempty"`
	// \"and\", \"or\"
	Relation *string `json:"relation,omitempty"`
	Children []*ConditionNode `json:"children,omitempty"`
}

// NewConditionRelation instantiates a new ConditionRelation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionRelation() *ConditionRelation {
	this := ConditionRelation{}
	var isOperand bool = false
	this.IsOperand = &isOperand
	var relation string = "and"
	this.Relation = &relation
	return &this
}

// NewConditionRelationWithDefaults instantiates a new ConditionRelation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionRelationWithDefaults() *ConditionRelation {
	this := ConditionRelation{}
	var isOperand bool = false
	this.IsOperand = &isOperand
	var relation string = "and"
	this.Relation = &relation
	return &this
}

// GetIsOperand returns the IsOperand field value if set, zero value otherwise.
func (o *ConditionRelation) GetIsOperand() bool {
	if o == nil || IsNil(o.IsOperand) {
		var ret bool
		return ret
	}
	return *o.IsOperand
}

// GetIsOperandOk returns a tuple with the IsOperand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionRelation) GetIsOperandOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOperand) {
		return nil, false
	}
	return o.IsOperand, true
}

// HasIsOperand returns a boolean if a field has been set.
func (o *ConditionRelation) HasIsOperand() bool {
	if o != nil && !IsNil(o.IsOperand) {
		return true
	}

	return false
}

// SetIsOperand gets a reference to the given bool and assigns it to the IsOperand field.
func (o *ConditionRelation) SetIsOperand(v bool) {
	o.IsOperand = &v
}

// GetRelation returns the Relation field value if set, zero value otherwise.
func (o *ConditionRelation) GetRelation() string {
	if o == nil || IsNil(o.Relation) {
		var ret string
		return ret
	}
	return *o.Relation
}

// GetRelationOk returns a tuple with the Relation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionRelation) GetRelationOk() (*string, bool) {
	if o == nil || IsNil(o.Relation) {
		return nil, false
	}
	return o.Relation, true
}

// HasRelation returns a boolean if a field has been set.
func (o *ConditionRelation) HasRelation() bool {
	if o != nil && !IsNil(o.Relation) {
		return true
	}

	return false
}

// SetRelation gets a reference to the given string and assigns it to the Relation field.
func (o *ConditionRelation) SetRelation(v string) {
	o.Relation = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *ConditionRelation) GetChildren() []*ConditionNode {
	if o == nil || IsNil(o.Children) {
		var ret []*ConditionNode
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionRelation) GetChildrenOk() ([]*ConditionNode, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *ConditionRelation) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []*ConditionNode and assigns it to the Children field.
func (o *ConditionRelation) SetChildren(v []*ConditionNode) {
	o.Children = v
}

func (o ConditionRelation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionRelation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsOperand) {
		toSerialize["is_operand"] = o.IsOperand
	}
	if !IsNil(o.Relation) {
		toSerialize["relation"] = o.Relation
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

type NullableConditionRelation struct {
	value *ConditionRelation
	isSet bool
}

func (v NullableConditionRelation) Get() *ConditionRelation {
	return v.value
}

func (v *NullableConditionRelation) Set(val *ConditionRelation) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionRelation) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionRelation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionRelation(val *ConditionRelation) *NullableConditionRelation {
	return &NullableConditionRelation{value: val, isSet: true}
}

func (v NullableConditionRelation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionRelation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


