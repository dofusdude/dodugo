/*
dofusdude

# A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save - [Go](https://github.com/dofusdude/dodugo) go get -u github.com/dofusdude/dodugo - [Python](https://github.com/dofusdude/dofusdude-py) pip install dofusdude - [PHP](https://github.com/dofusdude/dofusdude-php)  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my Discord.   ## Deploy now. Use forever. Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  ## Thank you! I highly welcome everyone on my [Discord](https://discord.gg/3EtHskZD8h) to just talk about projects and use cases or give feedback of any kind.  The servers have a fixed monthly cost to provide very fast responses. If you want to help me keeping them running or simply donate to that cause, consider becoming a [GitHub Sponsor](https://github.com/sponsors/dofusdude).

API version: 0.8.2
Contact: stelzo@steado.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dodugo

import (
	"encoding/json"
)

// checks if the ImageUrls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageUrls{}

// ImageUrls All images except icon are rendered in the background which can take some time (up to hours if all data is completely generated from scratch). Because of this, they can be null if they are not yet rendered.
type ImageUrls struct {
	// 60x60 px, always available
	Icon *string `json:"icon,omitempty"`
	// 200x200 px
	Sd NullableString `json:"sd,omitempty"`
	// 400x400 px
	Hq NullableString `json:"hq,omitempty"`
	// 800x800 px
	Hd NullableString `json:"hd,omitempty"`
}

// NewImageUrls instantiates a new ImageUrls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageUrls() *ImageUrls {
	this := ImageUrls{}
	return &this
}

// NewImageUrlsWithDefaults instantiates a new ImageUrls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageUrlsWithDefaults() *ImageUrls {
	this := ImageUrls{}
	return &this
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ImageUrls) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageUrls) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ImageUrls) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *ImageUrls) SetIcon(v string) {
	o.Icon = &v
}

// GetSd returns the Sd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageUrls) GetSd() string {
	if o == nil || IsNil(o.Sd.Get()) {
		var ret string
		return ret
	}
	return *o.Sd.Get()
}

// GetSdOk returns a tuple with the Sd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageUrls) GetSdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sd.Get(), o.Sd.IsSet()
}

// HasSd returns a boolean if a field has been set.
func (o *ImageUrls) HasSd() bool {
	if o != nil && o.Sd.IsSet() {
		return true
	}

	return false
}

// SetSd gets a reference to the given NullableString and assigns it to the Sd field.
func (o *ImageUrls) SetSd(v string) {
	o.Sd.Set(&v)
}
// SetSdNil sets the value for Sd to be an explicit nil
func (o *ImageUrls) SetSdNil() {
	o.Sd.Set(nil)
}

// UnsetSd ensures that no value is present for Sd, not even an explicit nil
func (o *ImageUrls) UnsetSd() {
	o.Sd.Unset()
}

// GetHq returns the Hq field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageUrls) GetHq() string {
	if o == nil || IsNil(o.Hq.Get()) {
		var ret string
		return ret
	}
	return *o.Hq.Get()
}

// GetHqOk returns a tuple with the Hq field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageUrls) GetHqOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hq.Get(), o.Hq.IsSet()
}

// HasHq returns a boolean if a field has been set.
func (o *ImageUrls) HasHq() bool {
	if o != nil && o.Hq.IsSet() {
		return true
	}

	return false
}

// SetHq gets a reference to the given NullableString and assigns it to the Hq field.
func (o *ImageUrls) SetHq(v string) {
	o.Hq.Set(&v)
}
// SetHqNil sets the value for Hq to be an explicit nil
func (o *ImageUrls) SetHqNil() {
	o.Hq.Set(nil)
}

// UnsetHq ensures that no value is present for Hq, not even an explicit nil
func (o *ImageUrls) UnsetHq() {
	o.Hq.Unset()
}

// GetHd returns the Hd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageUrls) GetHd() string {
	if o == nil || IsNil(o.Hd.Get()) {
		var ret string
		return ret
	}
	return *o.Hd.Get()
}

// GetHdOk returns a tuple with the Hd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageUrls) GetHdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hd.Get(), o.Hd.IsSet()
}

// HasHd returns a boolean if a field has been set.
func (o *ImageUrls) HasHd() bool {
	if o != nil && o.Hd.IsSet() {
		return true
	}

	return false
}

// SetHd gets a reference to the given NullableString and assigns it to the Hd field.
func (o *ImageUrls) SetHd(v string) {
	o.Hd.Set(&v)
}
// SetHdNil sets the value for Hd to be an explicit nil
func (o *ImageUrls) SetHdNil() {
	o.Hd.Set(nil)
}

// UnsetHd ensures that no value is present for Hd, not even an explicit nil
func (o *ImageUrls) UnsetHd() {
	o.Hd.Unset()
}

func (o ImageUrls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageUrls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if o.Sd.IsSet() {
		toSerialize["sd"] = o.Sd.Get()
	}
	if o.Hq.IsSet() {
		toSerialize["hq"] = o.Hq.Get()
	}
	if o.Hd.IsSet() {
		toSerialize["hd"] = o.Hd.Get()
	}
	return toSerialize, nil
}

type NullableImageUrls struct {
	value *ImageUrls
	isSet bool
}

func (v NullableImageUrls) Get() *ImageUrls {
	return v.value
}

func (v *NullableImageUrls) Set(val *ImageUrls) {
	v.value = val
	v.isSet = true
}

func (v NullableImageUrls) IsSet() bool {
	return v.isSet
}

func (v *NullableImageUrls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageUrls(val *ImageUrls) *NullableImageUrls {
	return &NullableImageUrls{value: val, isSet: true}
}

func (v NullableImageUrls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageUrls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


