/*
dofusdude

# Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js --save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts --save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 

API version: 1.0.0-rc.7
Contact: stelzo@steado.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dodugo

import (
	"encoding/json"
)

// checks if the Images type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Images{}

// Images All images except icon are rendered in the background which can take some time (up to hours if all data is completely generated from scratch). Because of this, they can be null if they are not yet rendered.
type Images struct {
	// 64x64 px, always available
	Icon *string `json:"icon,omitempty"`
	// around 2x the resolution of icon
	Sd NullableString `json:"sd,omitempty"`
	// around 2x the resolution of sd
	Hq NullableString `json:"hq,omitempty"`
	// around 2x the resolution of hd
	Hd NullableString `json:"hd,omitempty"`
}

// NewImages instantiates a new Images object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImages() *Images {
	this := Images{}
	return &this
}

// NewImagesWithDefaults instantiates a new Images object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImagesWithDefaults() *Images {
	this := Images{}
	return &this
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *Images) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Images) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *Images) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *Images) SetIcon(v string) {
	o.Icon = &v
}

// GetSd returns the Sd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Images) GetSd() string {
	if o == nil || IsNil(o.Sd.Get()) {
		var ret string
		return ret
	}
	return *o.Sd.Get()
}

// GetSdOk returns a tuple with the Sd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Images) GetSdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sd.Get(), o.Sd.IsSet()
}

// HasSd returns a boolean if a field has been set.
func (o *Images) HasSd() bool {
	if o != nil && o.Sd.IsSet() {
		return true
	}

	return false
}

// SetSd gets a reference to the given NullableString and assigns it to the Sd field.
func (o *Images) SetSd(v string) {
	o.Sd.Set(&v)
}
// SetSdNil sets the value for Sd to be an explicit nil
func (o *Images) SetSdNil() {
	o.Sd.Set(nil)
}

// UnsetSd ensures that no value is present for Sd, not even an explicit nil
func (o *Images) UnsetSd() {
	o.Sd.Unset()
}

// GetHq returns the Hq field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Images) GetHq() string {
	if o == nil || IsNil(o.Hq.Get()) {
		var ret string
		return ret
	}
	return *o.Hq.Get()
}

// GetHqOk returns a tuple with the Hq field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Images) GetHqOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hq.Get(), o.Hq.IsSet()
}

// HasHq returns a boolean if a field has been set.
func (o *Images) HasHq() bool {
	if o != nil && o.Hq.IsSet() {
		return true
	}

	return false
}

// SetHq gets a reference to the given NullableString and assigns it to the Hq field.
func (o *Images) SetHq(v string) {
	o.Hq.Set(&v)
}
// SetHqNil sets the value for Hq to be an explicit nil
func (o *Images) SetHqNil() {
	o.Hq.Set(nil)
}

// UnsetHq ensures that no value is present for Hq, not even an explicit nil
func (o *Images) UnsetHq() {
	o.Hq.Unset()
}

// GetHd returns the Hd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Images) GetHd() string {
	if o == nil || IsNil(o.Hd.Get()) {
		var ret string
		return ret
	}
	return *o.Hd.Get()
}

// GetHdOk returns a tuple with the Hd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Images) GetHdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hd.Get(), o.Hd.IsSet()
}

// HasHd returns a boolean if a field has been set.
func (o *Images) HasHd() bool {
	if o != nil && o.Hd.IsSet() {
		return true
	}

	return false
}

// SetHd gets a reference to the given NullableString and assigns it to the Hd field.
func (o *Images) SetHd(v string) {
	o.Hd.Set(&v)
}
// SetHdNil sets the value for Hd to be an explicit nil
func (o *Images) SetHdNil() {
	o.Hd.Set(nil)
}

// UnsetHd ensures that no value is present for Hd, not even an explicit nil
func (o *Images) UnsetHd() {
	o.Hd.Unset()
}

func (o Images) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Images) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if o.Sd.IsSet() {
		toSerialize["sd"] = o.Sd.Get()
	}
	if o.Hq.IsSet() {
		toSerialize["hq"] = o.Hq.Get()
	}
	if o.Hd.IsSet() {
		toSerialize["hd"] = o.Hd.Get()
	}
	return toSerialize, nil
}

type NullableImages struct {
	value *Images
	isSet bool
}

func (v NullableImages) Get() *Images {
	return v.value
}

func (v *NullableImages) Set(val *Images) {
	v.value = val
	v.isSet = true
}

func (v NullableImages) IsSet() bool {
	return v.isSet
}

func (v *NullableImages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImages(val *Images) *NullableImages {
	return &NullableImages{value: val, isSet: true}
}

func (v NullableImages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


