/*
dofusdude

# A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save - [Go](https://github.com/dofusdude/dodugo) go get -u github.com/dofusdude/dodugo - [Python](https://github.com/dofusdude/dofusdude-py) pip install dofusdude - [PHP](https://github.com/dofusdude/dofusdude-php)  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my Discord.   ## Deploy now. Use forever. Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  ## Thank you! I highly welcome everyone on my [Discord](https://discord.gg/3EtHskZD8h) to just talk about projects and use cases or give feedback of any kind.  The servers have a fixed monthly cost to provide very fast responses. If you want to help me keeping them running or simply donate to that cause, consider becoming a [GitHub Sponsor](https://github.com/sponsors/dofusdude).

API version: 0.8.3
Contact: stelzo@steado.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dodugo

import (
	"encoding/json"
)

// checks if the RecipeEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipeEntry{}

// RecipeEntry struct for RecipeEntry
type RecipeEntry struct {
	ItemAnkamaId *int32 `json:"item_ankama_id,omitempty"`
	ItemSubtype *string `json:"item_subtype,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
}

// NewRecipeEntry instantiates a new RecipeEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipeEntry() *RecipeEntry {
	this := RecipeEntry{}
	return &this
}

// NewRecipeEntryWithDefaults instantiates a new RecipeEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipeEntryWithDefaults() *RecipeEntry {
	this := RecipeEntry{}
	return &this
}

// GetItemAnkamaId returns the ItemAnkamaId field value if set, zero value otherwise.
func (o *RecipeEntry) GetItemAnkamaId() int32 {
	if o == nil || IsNil(o.ItemAnkamaId) {
		var ret int32
		return ret
	}
	return *o.ItemAnkamaId
}

// GetItemAnkamaIdOk returns a tuple with the ItemAnkamaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeEntry) GetItemAnkamaIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemAnkamaId) {
		return nil, false
	}
	return o.ItemAnkamaId, true
}

// HasItemAnkamaId returns a boolean if a field has been set.
func (o *RecipeEntry) HasItemAnkamaId() bool {
	if o != nil && !IsNil(o.ItemAnkamaId) {
		return true
	}

	return false
}

// SetItemAnkamaId gets a reference to the given int32 and assigns it to the ItemAnkamaId field.
func (o *RecipeEntry) SetItemAnkamaId(v int32) {
	o.ItemAnkamaId = &v
}

// GetItemSubtype returns the ItemSubtype field value if set, zero value otherwise.
func (o *RecipeEntry) GetItemSubtype() string {
	if o == nil || IsNil(o.ItemSubtype) {
		var ret string
		return ret
	}
	return *o.ItemSubtype
}

// GetItemSubtypeOk returns a tuple with the ItemSubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeEntry) GetItemSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemSubtype) {
		return nil, false
	}
	return o.ItemSubtype, true
}

// HasItemSubtype returns a boolean if a field has been set.
func (o *RecipeEntry) HasItemSubtype() bool {
	if o != nil && !IsNil(o.ItemSubtype) {
		return true
	}

	return false
}

// SetItemSubtype gets a reference to the given string and assigns it to the ItemSubtype field.
func (o *RecipeEntry) SetItemSubtype(v string) {
	o.ItemSubtype = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *RecipeEntry) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeEntry) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *RecipeEntry) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *RecipeEntry) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o RecipeEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipeEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ItemAnkamaId) {
		toSerialize["item_ankama_id"] = o.ItemAnkamaId
	}
	if !IsNil(o.ItemSubtype) {
		toSerialize["item_subtype"] = o.ItemSubtype
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

type NullableRecipeEntry struct {
	value *RecipeEntry
	isSet bool
}

func (v NullableRecipeEntry) Get() *RecipeEntry {
	return v.value
}

func (v *NullableRecipeEntry) Set(val *RecipeEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipeEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipeEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipeEntry(val *RecipeEntry) *NullableRecipeEntry {
	return &NullableRecipeEntry{value: val, isSet: true}
}

func (v NullableRecipeEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipeEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


